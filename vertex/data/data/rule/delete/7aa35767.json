{
  "id": "7aa35767",
  "conditions": [
    {
      "key": "",
      "compareType": "",
      "value": ""
    }
  ],
  "alias": "空间不足（动态规划）",
  "type": "javascript",
  "priority": "9",
  "code": "(maindata, torrent) => {\n  const GB = 1024 * 1024 * 1024;\n  const { torrents } = maindata;\n  //  最大上传速度（MiB/s）（默认下载限速150MiB/s）\n  const maxDownloadSpeed = 150;\n  // 删种执行间隔（秒）\n  const reportInterval = 60;\n  // 磁盘剩余空间（GB）\n  const freeSpaceOnDisk = maindata.freeSpaceOnDisk / GB;\n\n  // 到下次汇报的空间增量（GB）（预留1GB）\n  const spaceIncrementNextMin = Math.ceil((maxDownloadSpeed * reportInterval) / 1024) + 1;\n\n  // 剩余空间大于3倍空间增量（默认30），跳过\n  if (freeSpaceOnDisk >= 3 * spaceIncrementNextMin) {\n    return false;\n  }\n\n  // 未开始下载，跳过\n  if (torrent.completed === 0) {\n    return false;\n  }\n\n  // 拿不到torrents信息（异常情况）\n  if (!torrents) {\n    // 删除所有速度低于2MiB/s的种子\n    if (torrent.uploadSpeed < 2 * 1024 * 1024) {\n      return true;\n    }\n  }\n\n  // 只剩一个种子，不删\n  if (torrents.length === 1) {\n    return false;\n  }\n\n  // 待删除的种子\n  const deletedList = [];\n\n  // 格式化种子列表（过滤掉未开始的种子）\n  const formattedList = torrents\n    .filter((t) => t.completed > 0)\n    .map((t) => {\n      return {\n        name: t.name,\n        weight: Math.round(t.completed / GB),\n        value: t.uploadSpeed,\n      };\n    });\n\n  // 按照下载速度从小到大排序，下载速度相同的按照空间从大到小排序\n  formattedList.sort((a, b) => a.value - b.value || b.weight - a.weight);\n  /**\n   * 动态规划删除方法\n   */\n  function minimizeLoss(items, S) {\n    let n = items.length;\n    let dp = new Array(n + 1).fill().map(() => new Array(S + 1).fill(Infinity));\n    dp[0][0] = 0;\n\n    for (let i = 1; i <= n; i++) {\n      for (let j = 0; j <= S; j++) {\n        if (j < items[i - 1].weight) {\n          dp[i][j] = Math.min(dp[i - 1][j], items[i - 1].value);\n        } else {\n          dp[i][j] = Math.min(dp[i - 1][j], dp[i - 1][j - items[i - 1].weight] + items[i - 1].value);\n        }\n      }\n    }\n\n    let result = [];\n    let i = n,\n      j = S;\n    while (i > 0 && j > 0) {\n      if (dp[i][j] === dp[i - 1][j]) {\n        i--;\n      } else {\n        result.push(items[i - 1]);\n        j -= items[i - 1].weight;\n        i--;\n      }\n    }\n\n    return result;\n  }\n\n  try {\n    logger.info(\"磁盘剩余空间：\", freeSpaceOnDisk.toFixed(2) + \" GB\");\n    logger.info(\"种子已使用空间：\", maindata.usedSpace / GB.toFixed(2) + \" GB\");\n    logger.info(\"待处理种子数量：\", formattedList.length);\n  } catch (e) {}\n\n  // 大于2倍空间增量，（默认20）\n  if (freeSpaceOnDisk >= spaceIncrementNextMin * 2) {\n    // 删除已完成的且上传速度基本为0的种子\n    if (torrent.progress === 1 && torrent.uploadSpeed < 1024) {\n      deletedList.push(torrent);\n    }\n  }\n  // 小于2倍空间增量，补充到2倍\n  else {\n    const spaceNeed = Math.ceil(spaceIncrementNextMin * 2 - freeSpaceOnDisk);\n    try {\n      logger.info(\"需要释放空间: \" + spaceNeed + \" GB\");\n    } catch (e) {}\n    deletedList.push(...minimizeLoss(formattedList, spaceNeed));\n  }\n\n  // 执行删除\n  if (deletedList.some((item) => item.name === torrent.name)) {\n    return true;\n  }\n\n  return false;\n};",
  "deleteNum": "999",
  "used": true
}